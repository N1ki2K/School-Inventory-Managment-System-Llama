name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., v1.0.0)'
        required: true
        type: string

jobs:
  release:
    name: Create Release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: '8'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build application
        run: pnpm build

      - name: Run tests
        run: pnpm test

      - name: Create Release
        uses: actions/create-release@v1
        id: create_release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          release_name: Release ${{ github.ref_name }}
          body: |
            ## üöÄ Release ${{ github.ref_name }}
            
            ### Changes
            - See commit history for detailed changes
            
            ### Installation
            ```bash
            # Using Docker
            docker pull ${{ secrets.DOCKER_USERNAME }}/school-inventory-frontend:${{ github.ref_name }}
            
            # Using pnpm
            git clone https://github.com/${{ github.repository }}.git
            cd school-inventory-management-system
            git checkout ${{ github.ref_name }}
            pnpm install
            pnpm build
            ```
            
            ### Docker
            ```bash
            docker run -p 3000:80 ${{ secrets.DOCKER_USERNAME }}/school-inventory-frontend:${{ github.ref_name }}
            ```
          draft: false
          prerelease: false

      - name: Upload Release Assets
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./dist
          asset_name: school-inventory-frontend-${{ github.ref_name }}.zip
          asset_content_type: application/zip

  docker-release:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: release
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ secrets.DOCKER_USERNAME }}/school-inventory-frontend
          tags: |
            type=ref,event=tag
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  notify-release:
    name: Notify Release
    runs-on: ubuntu-latest
    needs: [release, docker-release]
    if: always()
    steps:
      - name: Notify Success
        if: ${{ needs.release.result == 'success' && needs.docker-release.result == 'success' }}
        run: |
          echo "‚úÖ Release ${{ github.ref_name }} created successfully!"
          echo "üê≥ Docker image pushed to registry"
          
      - name: Notify Failure
        if: ${{ needs.release.result == 'failure' || needs.docker-release.result == 'failure' }}
        run: |
          echo "‚ùå Release failed. Please check the logs."
